Category,Feature,Status,Description
"Core Architecture","Monorepo Setup","Completed","Project is structured as a pnpm workspace monorepo, separating apps and packages."
"Core Architecture","TypeScript","Completed","Full TypeScript support is enabled across all apps and packages for type safety."
"Core Architecture","Code Quality","Completed","ESLint and Prettier are configured with commit hooks to enforce code style and quality."
"Backend Service: `apps/auth`","User Registration","Completed","Handles new user creation with name, email, and hashed password."
"Backend Service: `apps/auth`","User Login (Email/Password)","Completed","Validates credentials and returns a secure JWT for session management."
"Backend Service: `apps/auth`","Social Login (Google)","Completed","Backend OAuth flow for Google is implemented via Passport.js."
"Backend Service: `apps/auth`","Social Login (GitHub)","Completed","Backend OAuth flow for GitHub is implemented via Passport.js."
"Backend Service: `apps/auth`","Standalone Express Server","Completed","Authentication is fully decoupled into its own Node.js/Express service."
"Backend Service: `apps/backend`","Data API (REST)","Completed","A dedicated Node.js/Express service provides a full REST API for all application data."
"Backend Service: `apps/backend`","MongoDB Integration","Completed","The service connects to MongoDB for all data persistence."
"Backend Service: `apps/backend`","CRUD - Users","Completed","Full Create, Read, Update, Delete API endpoints for users."
"Backend Service: `apps/backend`","CRUD - Clusters, Services, Hosts","Completed","Full Create, Read, Update, Delete API endpoints for all infrastructure components."
"Backend Service: `apps/backend`","CRUD - Alerts & Definitions","Completed","Full Create, Read, Update, Delete API endpoints for the alerting system."
"Backend Service: `apps/backend`","CRUD - Admin Content","Completed","Full API endpoints for managing documentation, legal docs, pricing, testimonials, and FAQs."
"Frontend App: `apps/home`","Landing Page","Completed","A complete, responsive marketing landing page with multiple sections."
"Frontend App: `apps/home`","Authentication UI","Completed","A unified, single-page UI for both user login and registration."
"Frontend App: `apps/home`","Social Login UI","Completed","Frontend buttons and logic to initiate Google and GitHub OAuth flows."
"Frontend App: `apps/home`","API Integration","Completed","Connects to the standalone `apps/auth` service for all authentication requests."
"Frontend App: `apps/web` (Dashboard)","Dashboard View","Completed","Main dashboard with summary cards and overview tables."
"Frontend App: `apps/web` (Dashboard)","AI Health Summary","Completed","AI-powered widget on the dashboard to summarize cluster health."
"Frontend App: `apps/web` (Dashboard)","Onboarding Tour","Completed","An interactive user tour for first-time visitors to the dashboard."
"Frontend App: `apps/web` (Dashboard)","Cluster Management","Completed","Full list, card, and detail views for clusters, including charts and service lists."
"Frontend App: `apps/web` (Dashboard)","Service Management","Completed","Full list, card, and detail views for services with actions like start, stop, and restart."
"Frontend App: `apps/web` (Dashboard)","Host Management","Completed","Full list, card, and detail views for all hosts."
"Frontend App: `apps/web` (Dashboard)","Alert Management","Completed","List and detail views for all alerts, including AI-powered troubleshooting steps."
"Frontend App: `apps/web` (Dashboard)","Alert Definitions","Completed","UI to view and create new alert definitions."
"Frontend App: `apps/web` (Dashboard)","Configuration Editor","Completed","UI to view and edit service configurations with version history."
"Frontend App: `apps/web` (Dashboard)","Task & Operations Viewer","Completed","A real-time view of running background operations with progress indicators."
"Frontend App: `apps/web` (Dashboard)","Log Search","Completed","A dedicated page for searching and filtering logs from all services."
"Frontend App: `apps/web` (Dashboard)","Activity Log Viewer","Completed","A page to view an immutable log of all user and system activities."
"Frontend App: `apps/web` (Dashboard)","Advanced Data Table","Completed","All tables feature sorting, filtering, view customization, and data export (PDF/Excel)."
"Frontend App: `apps/web` (Dashboard)","Global Search","Completed","A command palette-style global search to find any resource."
"Frontend App: `apps/web` (Dashboard)","Quick Access Navigation","Completed","A radial menu for quick access to common actions and pages."
"Frontend App: `apps/web` (Dashboard)","Settings Page","Completed","A tabbed interface for managing user profile, integrations, and API keys."
"Frontend App: `apps/admin` (Dashboard)","Admin User Management","Completed","Full CRUD functionality to manage users and their roles."
"Frontend App: `apps/admin` (Dashboard)","Admin Content Management","Completed","Full CRUD UIs for Documentation, Legal Docs, Pricing, Testimonials, and FAQs."
"Frontend App: `apps/admin` (Dashboard)","Secure & Separate","Completed","The admin dashboard is a completely separate and protected application."
"Shared Packages","`@amberops/ui`","Completed","A complete, shared React component library built with Radix and documented in Storybook."
"Shared Packages","`@amberops/api`","Completed","A centralized package for the API client, AI flows (Genkit), and mock data."
"Shared Packages","`@amberops/lib`","Completed","A shared package for all core TypeScript types and utility functions."
"Shared Packages","`@amberops/design-tokens`","Completed","A centralized Tailwind CSS configuration and theme for all applications."
"Testing","End-to-End (E2E) Tests","Completed","Playwright tests covering core user journeys, including the full auth flow."
"Developer Experience","Database Seeding","Completed","A `pnpm seed` command to populate the database with realistic mock data."
"Developer Experience","Development Scripts","Completed","`run.sh`, `build-workspace.sh`, and `clean-workspace.sh` scripts for easy environment management."
"Developer Experience","Environment Variables","Completed","A clear `.env.example` file outlines all necessary configuration variables."
"Developer Experience","CI/CD","Completed","A GitHub Actions workflow (`ci.yml`) is configured for linting, building, and testing on every push."
